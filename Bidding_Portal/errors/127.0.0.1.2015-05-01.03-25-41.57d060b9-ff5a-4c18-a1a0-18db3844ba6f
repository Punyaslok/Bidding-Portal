(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'js'"
p3
sS'layer'
p4
S'E:\\windows_web2py\\web2py_win\\web2py\\applications\\Bidding_Portal\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\ndef testslider():\n    return\n\n\n\n@auth.requires_login()\ndef index():\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n@auth.requires_login()\ndef sell():\n    form = SQLFORM(db.product_list).process()\n    if form.accepted:\n        session.flash = \'Successfully posted product\'\n        redirect(URL(\'myuploadeditems\'))\n    elif form.errors:\n        response.flash = \'Form has errors.\'\n    else:\n        response.flash = \'As easy as that !!!\'\n    return locals()\n\n@auth.requires_login()\ndef viewposteditems():\n    form = SQLFORM(db.product_list).process()\n    return locals()\n\n\n\ndef manage():\n    grid = SQLFORM.grid(db.product_list)\n    return locals()\n\ndef myuploadeditems():\n    rows = db(db.product_list.created_by==auth.user).select()\n    return locals()\n\ndef productpage():\n    arguments = request.args[0]\n    product = db(db.product_list.id==request.args[0]).select()\n    firstproduct=product[0]\n    form2 = SQLFORM.factory(\n        Field(\'bid_value\',\'integer\',requires=IS_NOT_EMPTY())\n    )\n    if form2.process().accepted:\n        ret=form2.vars.bid_value\n        if firstproduct.current_highest_bidder != \'none\' :\n            if int(ret) > int(firstproduct.current_highest_bid) :\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bid=ret)\n                ret2=auth.user.id\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bidder=ret2)\n                redirect(URL(\'default/productpage\',arguments))\n            else :\n                response.flash = \'Bid amount must be greater than the highest bid.\'\n        else:\n            if int(ret) > int(firstproduct.starting_price) :\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bid=ret)\n                ret2=auth.user.id\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bidder=ret2)\n                redirect(URL(\'default/productpage\',arguments))\n            else :\n                response.flash = \'Bid amount must be greater than the starting price.\'\n    return locals()\n\ndef index2():\n    arguments = request.args[0]\n    product = db(db.product_list.id==request.args[0]).select()\n    firstproduct=product[0]\n    form2 = SQLFORM.factory(\n        Field(\'bid_value\',\'integer\',requires=IS_NOT_EMPTY())\n    )\n    if form2.process().accepted:\n        ret=form2.vars.bid_value\n        if firstproduct.current_highest_bidder != \'none\' :\n            if int(ret) > int(firstproduct.current_highest_bid) :\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bid=ret)\n                ret2=auth.user.id\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bidder=ret2)\n                redirect(URL(\'default/productpage\',arguments))\n            else :\n                response.flash = \'Bid amount must be greater than the highest bid.\'\n        else:\n            if int(ret) > int(firstproduct.starting_price) :\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bid=ret)\n                ret2=auth.user.id\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bidder=ret2)\n                redirect(URL(\'default/productpage\',arguments))\n            else :\n                response.flash = \'Bid amount must be greater than the starting price.\'\n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(index2)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "E:\\windows_web2py\\web2py_win\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "E:\\windows_web2py\\web2py_win\\web2py\\applications\\Bidding_Portal\\controllers/default.py", line 152, in <module>\n  File "E:\\windows_web2py\\web2py_win\\web2py\\gluon\\globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "E:\\windows_web2py\\web2py_win\\web2py\\applications\\Bidding_Portal\\controllers/default.py", line 78, in index2\n    product = db(db.product_list.id==request.args[0]).select()\n  File "E:\\windows_web2py\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2093, in select\n    return adapter.select(self.query,fields,attributes)\n  File "E:\\windows_web2py\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 125, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "E:\\windows_web2py\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1226, in select\n    sql = self._select(query, fields, attributes)\n  File "E:\\windows_web2py\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1124, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "E:\\windows_web2py\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 909, in expand\n    out = op(first, second, **optional_args)\n  File "E:\\windows_web2py\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 806, in EQ\n    self.expand(second, first.type))\n  File "E:\\windows_web2py\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 920, in expand\n    return str(self.represent(expression,field_type))\n  File "E:\\windows_web2py\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1364, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'js\'\n'
p11
s.