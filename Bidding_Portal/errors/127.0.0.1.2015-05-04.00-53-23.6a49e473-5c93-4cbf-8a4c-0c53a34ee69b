(dp1
S'output'
p2
S"<type 'exceptions.IndexError'> list index out of range"
p3
sS'layer'
p4
S'/home/punya/web2py/applications/Bidding_Portal/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\ndef template():\n    return locals()\ndef template2():\n    return locals()\n\n\n#prettydate function is defined in layout2.html\n\n\n@auth.requires_login()\ndef index():\n    databaserefresh()\n    rows = db(db.product_list).select(orderby=~db.product_list.bid_count)\n    count=db(db.product_list).count()\n    response.flash = \'Hello \'+ auth.user.first_name\n    return locals()\n\n\n\n@auth.requires_login()\ndef sell():\n    db.product_list.Devices_Subcategory.show_if = (db.product_list.category==\'Devices\')\n    db.product_list.Mobile_Phones_Subcategory.show_if = (db.product_list.category==\'Devices\') and (db.product_list.Devices_Subcategory==\'Mobile Phones\')   #How on earth is this working with an or condition but not with an and condition\n    db.product_list.Computers_Subcategory.show_if =  (db.product_list.category==\'Devices\') and (db.product_list.Devices_Subcategory==\'Computers\')    #How on earth is this working with an or condition but not with an and condition\n    db.product_list.Cameras_Subcategory.show_if =  (db.product_list.category==\'Devices\') and (db.product_list.Devices_Subcategory==\'Cameras\')    #How on earth is this working with an or condition but not with an and condition\n    \n    db.product_list.Books_Subcategory.show_if = (db.product_list.category==\'Books\')\n    db.product_list.end_date_time.writable  = True\n    db.product_list.starting_price.writable = True\n    \n    db.product_list.category.writable = True\n    db.product_list.Devices_Subcategory.writable = True\n    db.product_list.Mobile_Phones_Subcategory.writable = True\n    db.product_list.Computers_Subcategory.writable = True\n    db.product_list.Cameras_Subcategory.writable = True\n    db.product_list.Books_Subcategory.writable = True\n    \n    form = SQLFORM(db.product_list).process()\n    if form.accepted:\n        session.flash = \'Successfully posted product\'\n        db.product_list.end_date_time.writable = False\n        db.product_list.starting_price.writable = False\n        \n        db.product_list.category.writable = False\n        db.product_list.Devices_Subcategory.writable = False\n        db.product_list.Mobile_Phones_Subcategory.writable = False\n        db.product_list.Computers_Subcategory.writable = False\n        db.product_list.Cameras_Subcategory.writable = False\n        db.product_list.Books_Subcategory.writable = False\n        \n        redirect(URL(\'myuploadeditems\'))\n    elif form.errors:\n        response.flash = \'Form has errors.\'\n    else:\n        response.flash = \'As easy as that !!!\'\n    return locals()\n\n@auth.requires_login()\ndef viewposteditems():\n    form = SQLFORM(db.product_list).process()\n    return locals()\n\n\n@auth.requires_login()\ndef manage():\n    query = db.product_list.created_by == auth.user\n    grid = SQLFORM.grid(query, orderby=db.product_list.end_date_time, create = False, details = False, deletable = False)\n    return dict(grid=grid)\n\n@auth.requires_login()\ndef myuploadeditems():\n    rows = db(db.product_list.created_by==auth.user).select()\n    rows2 = db(db.records.bidder_id==auth.user.id).select()\n    return locals()\n\n\n\n@auth.requires_login()\ndef productpage():\n    rows = db(db.product_list).select(orderby=db.product_list.bid_count)\n    session.flash = \'Bids once made cannot be withdrawn.\'\n    arguments = request.args[0]\n    product = db(db.product_list.id==request.args[0]).select()\n    firstproduct=product[0]\n    form2 = SQLFORM.factory(\n        Field(\'bid_value\',\'integer\',requires=IS_NOT_EMPTY())\n    )\n    if form2.process().accepted:\n        ret=form2.vars.bid_value\n        if firstproduct.current_highest_bidder != \'none\' :\n            if int(ret) > int(firstproduct.current_highest_bid) :\n                db.records.insert(bidder_id=auth.user.id,prod_id=firstproduct.id)\n                num_bids = firstproduct.bid_count\n                num_bids=num_bids+1\n                db(db.product_list.id==request.args[0]).validate_and_update(bid_count=num_bids)\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bid=ret)\n                ret2=auth.user.id\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bidder=ret2)\n                redirect(URL(\'default/productpage\',arguments))\n            else :\n                session.flash = \'Bid amount must be greater than the highest bid.\'\n        else:\n            if int(ret) > int(firstproduct.starting_price) :\n                db.records.insert(bidder_id=auth.user.id,prod_id=firstproduct.id)\n                num_bids = 0\n                num_bids=num_bids+1\n                db(db.product_list.id==request.args[0]).validate_and_update(bid_count=num_bids)\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bid=ret)\n                ret2=auth.user.id\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bidder=ret2)\n                redirect(URL(\'default/productpage\',arguments))\n            else :\n                session.flash = \'Bid amount must be greater than the starting price.\'\n    return locals()\n\n\n\n\n\n@auth.requires_login()\ndef querypage():\n    length = int(len(request.args))\n    if length == 0 :\n        rows = db(db.product_list).select()\n    if length == 3 :\n        if request.args[0]==\'Devices\' :\n            if request.args[1]==\'Mobile_Phones\':\n                if request.args[2] == \'Super_Smart_Phone\' :\n                    rows = db(db.product_list.category == \'Devices\' and db.product_list.Devices_Subcategory==\'Mobile Phones\' and db.product_list.Mobile_Phones_Subcategory==\'Super Smart Phone\' ).select()\n                if request.args[2] == \'Thin_Magic_Mobile\' :\n                    rows = db(db.product_list.category == \'Devices\' and db.product_list.Devices_Subcategory==\'Mobile Phones\' and db.product_list.Mobile_Phones_Subcategory==\'Thin Magic Mobile\' ).select()\n                if request.args[2] == \'Performance_Crusher\' :\n                    rows = db(db.product_list.category == \'Devices\' and db.product_list.Devices_Subcategory==\'Mobile Phones\' and db.product_list.Mobile_Phones_Subcategory==\'Performance Crusher\' ).select()\n                if request.args[2] == \'View_All\' :\n                    rows = db(db.product_list.category == \'Devices\' and db.product_list.Devices_Subcategory==\'Mobile Phones\').select()\n    return locals()\n\n\n\n@auth.requires_login()\ndef index2():\n    arguments = request.args[0]\n    product = db(db.product_list.id==request.args[0]).select()\n    firstproduct=product[0]\n    form2 = SQLFORM.factory(\n        Field(\'bid_value\',\'integer\',requires=IS_NOT_EMPTY())\n    )\n    if form2.process().accepted:\n        ret=form2.vars.bid_value\n        if firstproduct.current_highest_bidder != \'none\' :\n            if int(ret) > int(firstproduct.current_highest_bid) :\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bid=ret)\n                ret2=auth.user.id\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bidder=ret2)\n                redirect(URL(\'default/productpage\',arguments))\n            else :\n                response.flash = \'Bid amount must be greater than the highest bid.\'\n        else:\n            if int(ret) > int(firstproduct.starting_price) :\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bid=ret)\n                ret2=auth.user.id\n                db(db.product_list.id==request.args[0]).validate_and_update(current_highest_bidder=ret2)\n                redirect(URL(\'default/productpage\',arguments))\n            else :\n                response.flash = \'Bid amount must be greater than the starting price.\'\n    return locals()\n\n\n\n\ndef databaserefresh():\n    rows = db(db.product_list.status == \'Live\').select(orderby=~db.product_list.bid_count)\n    for row in rows :\n        if row.end_date_time < request.now :\n            db(db.product_list.id==row.id).update(status=\'Expired\')\n            if row.current_highest_bidder != \'none\' :\n                rec_email = db(db.auth_user.id == row.current_highest_bidder).select()[0]\n                mail.send(to=[rec_email.email],subject=\'Successfully acquired product.\',message=\'Congratulations \'+rec_email.first_name+\' \'+rec_email.last_name+\', you have won the bidding for \'+row.product_name+\'. You may now contact the seller at his email address.\')\n            db.commit()\n    return locals()\n\n\n\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(productpage)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/punya/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/punya/web2py/applications/Bidding_Portal/controllers/default.py", line 247, in <module>\n  File "/home/punya/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/punya/web2py/gluon/tools.py", line 3440, in f\n    return action(*a, **b)\n  File "/home/punya/web2py/applications/Bidding_Portal/controllers/default.py", line 93, in productpage\n    arguments = request.args[0]\nIndexError: list index out of range\n'
p11
s.